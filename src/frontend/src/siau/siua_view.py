# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, pyqtSignal, pyqtSlot
from PyQt6.QtGui import QIntValidator
from utils.options import INSTANCES_SIAU
from PyQt6.QtWidgets import (
    QWidget,
    QTableWidgetItem,
    QHBoxLayout,
    QLineEdit,
    QCheckBox,
    QPushButton,
    QHeaderView,
    QComboBox,
    QMessageBox,
)


class SiauView(QWidget):
    onOptionEvent = pyqtSignal(INSTANCES_SIAU)
    # id, row
    onUpdateItemEvent = pyqtSignal(int, list)
    onDeleteItemEvent = pyqtSignal(int)
    onCreateItemEvent = pyqtSignal(list)

    def connect_signals(self):
        self.menuEntidades.triggered.connect(lambda x: self.onOptionChoosed(x))

    def onUpdate(self, id, row):
        data = self.getData(row)
        self.onUpdateItemEvent.emit(id, data)

    def onDelete(self, id, row):
        self.onDeleteItemEvent.emit(id)

    def onCreate(self, id, row):
        data = self.getData(row)
        self.onCreateItemEvent.emit(data)
        
    def setHeader(self, title):
        self.parent_window.setWindowTitle("Proyecto Programacion Avanzada - " + title)

    def getData(self, row):
        row_items = []
        for col in range(1, self.table.columnCount() - 1):
            item = self.table.cellWidget(row, col).layout().itemAt(0).widget()
            row_items.append(item)
        data = []
        for widget in row_items:
            value = None
            if isinstance(widget, QLineEdit):
                value = widget.text()
            elif isinstance(widget, QCheckBox):
                value = widget.isChecked()
            elif isinstance(widget, QComboBox):
                value = widget.currentData()
            data.append(value)
        return data

    def setExtras(self, extras):
        self.extras = extras
    
    def onOptionChoosed(self, action):
        value = None
        match action:
            case self.actionAlumnos:
                value = INSTANCES_SIAU.ALUMNOS
            case self.actionCarreras:
                value = INSTANCES_SIAU.CARRERAS
            case self.actionCentros_Universitarios:
                value = INSTANCES_SIAU.CENTROS_UNIVERSITARIOS
            case self.actionMaterias:
                value = INSTANCES_SIAU.MATERIAS
            case self.actionProfesores:
                value = INSTANCES_SIAU.PROFESORES
            case self.actionCreditos:
                value = INSTANCES_SIAU.CREDITOS
        if value != None:
            self.onOptionEvent.emit(value)

    def setColumns(self, cols: dict[str, str]):
        self.table.clear()
        self.table.setColumnCount(0)
        cols_names = list(cols.keys())
        cols_names.append("TOOLS")
        for i, col in enumerate(cols_names):
            self.table.insertColumn(i)
            self.table.setHorizontalHeaderItem(i, QTableWidgetItem(col))
        self.setInputRow(cols)
        
    def setInputRow(self, cols):
        colIndex = 0
        self.table.setRowCount(2)
        for col, value in cols.items():
            control = self.genInputCell(col, cols[col]["type"], None)
            self.table.setCellWidget(0, colIndex, control)
            self.table.setRowHeight(0, 50)
            colIndex += 1
        self.table.setCellWidget(0, colIndex, self.genButtonCell(0, 0))

    def setRows(self, cols, rows):
        self.addRow(cols, rows)

    def addRow(self, cols, rows: list[dict] = []):
        colIndex = 0
        rowIndex = 1
        self.table.setRowCount(len(rows) + 1)
        if len(rows) > 0:
            for instance in rows:
                colIndex = 0
                for col, value in instance.items():
                    control = self.genInputCell(col, cols[col]["type"], value)
                    self.table.setCellWidget(rowIndex, colIndex, control)
                    self.table.setRowHeight(rowIndex, 50)
                    colIndex += 1
                self.table.setCellWidget(
                    rowIndex, colIndex, self.genButtonCell(instance["id"], rowIndex)
                )
                rowIndex += 1

    def genInputCell(self, col, col_type, value=None):
        input = None
        layout = QHBoxLayout()
        widget = QWidget()
        if isinstance(col_type, list) or col.endswith("_id"):
            instances = self.extras[col]
            input = QComboBox(widget)
            for instance in instances:
                input.addItem(instance["nombre"], instance["id"])
            if value != None:
                index = [i for i, elemento in enumerate(self.extras[col]) if elemento["id"] == value][0] if len(self.extras[col]) else 0
                input.setCurrentIndex(index)
            # asignar labels
        if col_type == int:
            input = QLineEdit()
            validator = QIntValidator(1, 100)
            input.setValidator(validator)
            input.setDisabled(col == "id")
            input.setText(str(value) if value != None else "")  # type: ignore
        if col_type == str:
            input = QLineEdit()
            input.setText(str(value) if value != None else "")
        if col_type == bool:
            input = QCheckBox()
            if value != None:
                input.setChecked(value)
        if input != None:
            layout.addWidget(input)  # type: ignore
        widget.setLayout(layout)
        return widget

    def genButtonCell(self, id=0, row=0):
        layout = QHBoxLayout()
        buttons = []
        if id > 0:
            updateBtn = QPushButton("Update", self)
            updateBtn.clicked.connect(lambda _: self.onUpdate(id, row))
            deleteBtn = QPushButton("Delete", self)
            deleteBtn.clicked.connect(lambda _: self.onDelete(id, row))
            buttons = [updateBtn, deleteBtn]
        else:
            createBtn = QPushButton("Create", self)
            createBtn.clicked.connect(lambda _: self.onCreate(id, row))
            buttons = [createBtn]

        for btn in buttons:
            layout.addWidget(btn)
        widget = QWidget()
        widget.setLayout(layout)
        return widget
    
    def showCredits(self):
        alert = QMessageBox()
        alert.setWindowTitle("Aviso")
        alert.setText("Programa elaborado por Claudio, Christopher y Jezreel")
        alert.setIcon(QMessageBox.Icon.Information)
        alert.exec()

    def setupUi(self, SIAU):
        self.extras = {}
        SIAU.setObjectName("SIAU")
        SIAU.resize(1043, 673)
        self.centralwidget = QtWidgets.QWidget(parent=SIAU)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.table = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.table.setObjectName("table")
        self.table.setColumnCount(0)
        self.table.setRowCount(0)
        self.table.horizontalHeader().setSectionResizeMode(
            QHeaderView.ResizeMode.Stretch
        )
        self.horizontalLayout.addWidget(self.table)
        SIAU.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=SIAU)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1043, 21))
        self.menubar.setObjectName("menubar")
        self.menuEntidades = QtWidgets.QMenu(parent=self.menubar)
        self.menuEntidades.setObjectName("menuEntidades")
        SIAU.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=SIAU)
        self.statusbar.setObjectName("statusbar")
        SIAU.setStatusBar(self.statusbar)
        self.actionAlumnos = QtGui.QAction(parent=SIAU)
        self.actionAlumnos.setObjectName("actionAlumnos")
        self.actionCarreras = QtGui.QAction(parent=SIAU)
        self.actionCarreras.setObjectName("actionCarreras")
        self.actionCentros_Universitarios = QtGui.QAction(parent=SIAU)
        self.actionCentros_Universitarios.setObjectName("actionCentros_Universitarios")
        self.actionMaterias = QtGui.QAction(parent=SIAU)
        self.actionMaterias.setObjectName("actionMaterias")
        self.actionProfesores = QtGui.QAction(parent=SIAU)
        self.actionProfesores.setObjectName("actionProfesores")
        self.actionCreditos = QtGui.QAction(parent=SIAU)
        self.actionCreditos.setObjectName("actionCreditos")
        self.menuEntidades.addAction(self.actionAlumnos)
        self.menuEntidades.addAction(self.actionCarreras)
        self.menuEntidades.addAction(self.actionCentros_Universitarios)
        self.menuEntidades.addAction(self.actionMaterias)
        self.menuEntidades.addAction(self.actionProfesores)
        self.menuEntidades.addSeparator()
        self.menuEntidades.addAction(self.actionCreditos)
        self.menubar.addAction(self.menuEntidades.menuAction())

        self.retranslateUi(SIAU)
        QtCore.QMetaObject.connectSlotsByName(SIAU)

    def retranslateUi(self, SIAU):
        _translate = QtCore.QCoreApplication.translate
        self.parent_window = SIAU
        SIAU.setWindowTitle(_translate("SIAU", "Proyecto Avanzada SIAU"))
        self.menuEntidades.setTitle(_translate("SIAU", "Entidades"))
        self.actionAlumnos.setText(_translate("SIAU", "Alumnos"))
        self.actionCarreras.setText(_translate("SIAU", "Carreras"))
        self.actionCentros_Universitarios.setText(
            _translate("SIAU", "Centros Universitarios")
        )
        self.actionMaterias.setText(_translate("SIAU", "Materias"))
        self.actionProfesores.setText(_translate("SIAU", "Profesores"))
        self.actionCreditos.setText(_translate("SIAU", "Creditos"))
